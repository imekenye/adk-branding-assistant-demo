name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, hackathon-demo ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Code formatting check
      run: uv run black --check .
    
    - name: Import sorting check
      run: uv run isort --check-only .
    
    - name: Type checking
      run: uv run mypy agents/ tools/ --ignore-missing-imports
    
    - name: Test ADK integration
      run: |
        uv run python -c "
        import google.adk
        print(f'✅ Google ADK v{google.adk.__version__}')
        from agents.coordinator import root_agent
        print(f'✅ Agent loaded: {root_agent.name}')
        "

  deploy-hackathon:
    name: Deploy to Google Cloud (Hackathon)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hackathon-demo'
    needs: test
    environment: production
    
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud (Keyless WIF)
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/1018023867491/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'github-actions-deployer@my-ai-projects-422803.iam.gserviceaccount.com'
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Debug Project Files
      run: |
        echo "📁 Project structure:"
        ls -la
        echo ""
        echo "🐳 Dockerfile content:"
        if [ -f "Dockerfile" ]; then
          cat Dockerfile
        else
          echo "❌ No Dockerfile found!"
        fi
        echo ""
        echo "📦 pyproject.toml content:"
        if [ -f "pyproject.toml" ]; then
          cat pyproject.toml
        else
          echo "❌ No pyproject.toml found!"
        fi
        echo ""
        echo "🐍 Python files:"
        find . -name "*.py" | head -10     
    
    - name: Deploy to Cloud Run with build log capture
      run: |
        echo "🚀 Starting deployment..."
        
        # Start deployment and capture output
        set +e  # Don't exit on error so we can capture logs
        
        gcloud run deploy adk-branding-assistant \
          --source . \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }},OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},REPLICATE_API_TOKEN=${{ secrets.REPLICATE_API_TOKEN }},PORT=8000" \
          --memory 2Gi \
          --cpu 2 \
          --timeout 3600 \
          --max-instances 10 \
          --verbosity=debug 2>&1 | tee deploy_output.log
        
        DEPLOY_EXIT_CODE=${PIPESTATUS[0]}
        
        if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
          echo "❌ Deployment failed with exit code $DEPLOY_EXIT_CODE"
          echo "🔍 Fetching recent build logs..."
          
          # Get the most recent failed build
          echo "📋 Recent builds:"
          gcloud builds list --limit=5 --format="table(id,status,createTime)" || true
          
          # Get the most recent build ID
          RECENT_BUILD_ID=$(gcloud builds list --limit=1 --format="value(id)" --filter="status:FAILURE" 2>/dev/null || true)
          
          if [ ! -z "$RECENT_BUILD_ID" ]; then
            echo "🔍 Fetching logs for build: $RECENT_BUILD_ID"
            gcloud builds log $RECENT_BUILD_ID || true
          else
            echo "⚠️ Could not find recent failed build. Checking all recent builds..."
            ALL_RECENT_BUILD_ID=$(gcloud builds list --limit=1 --format="value(id)" 2>/dev/null || true)
            if [ ! -z "$ALL_RECENT_BUILD_ID" ]; then
              echo "🔍 Fetching logs for most recent build: $ALL_RECENT_BUILD_ID"
              gcloud builds log $ALL_RECENT_BUILD_ID || true
            fi
          fi
          
          echo "📋 Deployment output:"
          cat deploy_output.log
          
          exit $DEPLOY_EXIT_CODE
        else
          echo "✅ Deployment successful!"
        fi
     
    - name: Get deployment URL
      run: |
        echo "🚀 Hackathon demo deployed!"
        gcloud run services describe adk-branding-assistant --region us-central1 --format 'value(status.url)'